/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteHgjArgs } from "./DeleteHgjArgs";
import { HgjFindManyArgs } from "./HgjFindManyArgs";
import { HgjFindUniqueArgs } from "./HgjFindUniqueArgs";
import { Hgj } from "./Hgj";
import { HgjService } from "../hgj.service";

@graphql.Resolver(() => Hgj)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class HgjResolverBase {
  constructor(
    protected readonly service: HgjService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Hgj",
    action: "read",
    possession: "any",
  })
  async _hgjsMeta(
    @graphql.Args() args: HgjFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Hgj])
  @nestAccessControl.UseRoles({
    resource: "Hgj",
    action: "read",
    possession: "any",
  })
  async hgjs(@graphql.Args() args: HgjFindManyArgs): Promise<Hgj[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Hgj, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Hgj",
    action: "read",
    possession: "own",
  })
  async hgj(@graphql.Args() args: HgjFindUniqueArgs): Promise<Hgj | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Hgj)
  @nestAccessControl.UseRoles({
    resource: "Hgj",
    action: "delete",
    possession: "any",
  })
  async deleteHgj(@graphql.Args() args: DeleteHgjArgs): Promise<Hgj | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
